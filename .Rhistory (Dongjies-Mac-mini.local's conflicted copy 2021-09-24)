14302.02+21149.02
23229-7702
49354/58.66
12160+1174-7850.9
load("~/Dropbox/SIBMOB/fmmr6/data/gss94.RData")
View(gss94)
View(gss88)
View(gss8590)
View(gss94)
read.csv("data/titanic.csv")
titanic <- read.csv("data/titanic.csv")
View(titanic)
save(titanic, file="data/titanic.Rdata")
load("data/wine.rda")
View(wine)
View(titanic)
str(titanic)
devtools::test()
kmean(x,2)
kmeans(x,2)
kmeans(X,2)
kmeans(Y,2)
kmeans(cbind(Y,X),2)
devtools::test()
str(result)
result$value
devtools::test()
theta_update
theta_update
devtools::test()
coef(theta_update)
theta_update$par
devtools::test()
theta_update$value
theta_update
result
#result <- suppressWarnings(optimx(theta, ll, method="Nelder-Mead",
#                                  hessian=T))
# result <- list(coefficients=newtonsys(gr1, theta)$zero)
# result <- optim(theta, ll, gr=gr1, method="Nelder-Mead")
result <- optim(theta, ll, gr=gr1, method="L-BFGS-B")
devtools::test()
str(lm1)
summary(lm1)
?mle
mod1
mod1$value()
mod1$value
devtools::test()
stats4::mle(ll,start=private$start)
stats4::mle(ll)
stats4::mle(ll,start=list(theta=private$start))
?lm
?coef
devtools::test()
str(logLik(mle_result))
str(stats4::logLik(mle_result))
str(mle_result)
mle_result@details
?test_that
mean(data1)
colMeans(data1)
print(data3)
print(data3)
devtools::test()
devtools::test()
z
str(z)
devtools::test()
args
args
z
str(z)
str(z)
str(z)
devtools::test()
devtools::test()
devtools::test()
str(z)
devtools::test()
str(z)
str(z)
str(z)
str(z)
str(z)
value
postunscaled
postscaled
X
z
X
load("data/titanic.Rdata")
devtools::test()
devtools::test()
install.package('Rmixmod')
install.packages('Rmixmod')
install.packages('mixtools')
install.packages('pracma')
install.packages('pracma')
NPreg$yn
rep(1,1)
ncol(c(1,1,1))
is.vector(matrix(1,2,2))
is.vector(matrix(1,1,1))
rbind(c(),matrix(1,2,2))
rbind(c(1,1),c(1,1))
matrix(1,2,3)%*%c(1,1,1)
matrix(1,2,3)%*%c(1,1)
rbind(c(1,1,1),c(2,2,2))
cbind(c(1,1,1),c(2,2,2))
matrix(c(1,3,4))
devtools::document()
?FamilyMultiNomial
rmultinom(5,4,3)
rmultinom(5,4,3)
rmultinom(5,4,3)
rmultinom(5,4,c(0.5,0.5))
rmultinom(5,4,c(0.5,0.5))
rmultinom(5,2,c(0.5,0.5))
rmultinom(5,2,c(0.5,0.5))
rmultinom(2,1,c(0.5,0.5))
rmultinom(2,1,c(0.5,0.5))
rmultinom(2,1,c(0.5,0.5))
rmultinom(2,1,c(0.5,0.5))
rmultinom(5,1,c(0.5,0.5))
rmultinom(5,2,c(0.5,0.5))
rmultinom(1,5,rep(0.2,5))
rmultinom(1,1,rep(0.2,5))
rmultinom(1,1,rep(0.2,5))
rmultinom(1,1,rep(0.2,5))
rmultinom(2,1,rep(0.2,5))
rmultinom(2,1,rep(0.2,5))
dmultinom(c(1,2),rep(0.2,5))
dmultinom(c(1,2),prob=rep(0.2,5))
dmultinom(c(1,2,3,4,5),prob=rep(0.2,5))
dmultinom(c(1,2,3,4,5),prob=rep(0.2,5))
dmultinom(c(1,0,0,0,0),prob=rep(0.2,5))
dmultinom(c(0,1,0,0,0),prob=rep(0.2,5))
rmultinom(1,1,rep(0.2,5))
rmultinom(2,1,matrix(rep(0.2,10),ncol=2))
matrix(rep(0.2,10), ncol=2)
rmultinom(2,1,matrix(rep(0.2,10),nrow=2))
rmultinom(2,2,matrix(rep(0.2,10),nrow=2))
x1 = runif(100,0,1)
x2 = runif(100,0,1)
theta1 <- matrix(c(5,4,3,2,6,1,3,2,4,5,6,2), ncol=3)
theta1
theta1[1:2,1]
sigmoid(theta1)
rmultinom(1:10, 1, rep(0.1,10))
rmultinom(1:10, 1, matrix(rep(0.1,20),ncol=2))
devtools::test()
devtools::test()
devtools::test()
rmultinom(3,1,c(0.3,0.3,0.4))
rmultinom(1,1,c(0.3,0.3,0.4))
rmultinom(1:3,1,c(0.3,0.3,0.4))
rmultinom(1:3,1,c(0.3,0.3,0.4))
rmultinom(1:3,1,c(0.3,0.3,0.4))
rmultinom(1:3,1,c(0.3,0.3,0.4))
devtools::test()
length(df)
theta <-  matrix(c(1,2,5,1,4,3), ncol=1)
theta[1,]
theta[2,]
theta[2,1]
l <- list(
lower = matrix(c(0, rep(-Inf, ncol(X)))),
upper = matrix(c(+Inf, rep(+Inf, ncol(X))))
)
devtools::test()
devtools::test()
install.packages("fastDummies")
devtools::test(filter="Mixer")
Y
theta
devtools::test(filter="Mixer")
theta
devtools::test(filter="Mixer")
theta
theta
devtools::test(filter="Mixer")
theta
load("~/Dropbox/SIBMOB/fmmr6/data/gss94_educ.RData")
View(gss94_educ)
str(gss94_educ$ses2cat)
class(gss94_educ$ses2cat)
ikelihood_func, d=hidden, Y=private$Y, X=private$X
devtools::test(filter="fmglm")
result
devtools::test(filter="fmglm")
result$par
result$par
n
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
theta_update
l <- l + d[,i]*(log(pi_vector[i])
+ private$family[[i]]$gen_density()(theta[(npar*(i-1)+1):(npar*(i-1)+npar),], Y, X))
devtools::test(filter="fmglm")
sum(c(1,2,3) != 0)
options(warn=2)
options(warn=1)
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
options(warn=1)
devtools::test(filter="fmglm")
private$mixer$get_family_init()
devtools::test(filter="fmglm")
options(warn=1)
devtools::test(filter="fmglm")
result$par
n
n
devtools::test(filter="fmglm")
is.vector(Y)
class(Y)
is.numeric(matrix(Y, ncol=1))
is.matrix(matrix(Y, ncol=1))
is.matrix(Y)
devtools::test(filter="fmglm")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
weights
dim(weights)
length(weights)
devtools::test(filter="fmglm")
net
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result$par
dim(result$par)
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result$par
result$par
result$par
class(theta)
class(Y)
devtools::test(filter="fmglm")
theta
devtools::test(filter="fmglm")
result$par
theta
X
devtools::test(filter="fmglm")
train <- suppressWarnings(nnet::nnet(private$X[,-1], private$Y, weights=hidden[,k], size=0,
skip = T, entropy = TRUE, trace=F))
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
options(warn=1)
options(warn=1)
devtools::test(filter="fmglm")
options(warn=1)
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
options(warn=1)
devtools::test(filter="fmglm")
result$par
result$par
use_llc
usethis::use_test("FamilyMultiNomail")
devtools::test(filter="FamilyMultiNomial")
dim(theta)
dim(X)
devtools::test(filter="fmglm")
colnames(private$Y)
model.frame(formula, data)[,1]
strsplit(colnames(private$Y))
strsplit(colnames(private$Y),"_")
strsplit(colnames(private$Y),"_")[[]][2]
strsplit(colnames(private$Y),"_")[2]
apply(colnames(private$Y),1,function(x){strsplit(x, "_")[2]})
apply(colnames(private$Y),0,function(x){strsplit(x, "_")[2]})
sapply(colnames(private$Y), function(x))
sapply(colnames(private$Y), function(x){strsplit(x, "_")})
sapply(colnames(private$Y), function(x){strsplit(x, "_")[2]})
sapply(colnames(private$Y), function(x){strsplit(x, "_")[1]})
sapply(colnames(private$Y), function(x){strsplit(x, "_")[1][2]})
sapply(colnames(private$Y), function(x){strsplit(x, "_")[1]})
colnames(private$Y) <- 2:3
colnames(private$Y)
unique(private$Y)
private$Y
fastDummies::dummy_columns(model.frame(formula, data)[,1]
, remove_first_dummy = T, remove_selected_columns = T)
private$Y <- fastDummies::dummy_columns(model.frame(formula, data)[,1],
select_columns = 1:3,
remove_selected_columns = T)
private$Y <- fastDummies::dummy_columns(model.frame(formula, data)[,1],
select_columns = c("a", "b", "c"),
remove_selected_columns = T)
View(data)
private$Y <- fastDummies::dummy_columns(model.frame(formula, data)[,1],
select_columns = c("ed3cat"),
remove_selected_columns = T)
model.frame(formula, data)[,1]
unique(model.frame(formula, data)[,1])
devtools::test(filter="fmglm")
colSums(z)
rowSums(z)
colSums(z)/3696
devtools::test(filter="fmglm")
options(warn=1)
options(warn=1)
devtools::test(filter="fmglm")
?``
`private$y`
`private$Y`
`i`
i
`+`(1,2)
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
return(R)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?summary
test1 <- matrix(c(1:10),col=2)
test1 <- matrix(1:10,ncol=2)
test1
c(test1)
test_list <- list()
test_list.append('k' = test1)
list.append(test_list,'k'=test1)
test_list[k] = test1
test_list[[k]] = test1
test_list[['t']] = test1
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result$par
dim(private$Y)
matrix(test1)
test1
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
hessian()
hessian
result$hessian
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
content_l
devtools::test(filter="fmglm")
content_l
total_list[[coefficients]] <- sum_df
total_list[['coefficients']] <- sum_df
total_list
total_list[[pi]] <- pi_list
total_list[[logLik]] <- logLik
logLik
total_list[['logLik']] <- logLik
devtools::test(filter="FamilyMultiNomial")
devtools::test(filter="FamilyMultiNomial")
devtools::test(filter="FamilyMultiNomial")
hessian
devtools::test(filter="FamilyMultiNomial")
hessian()
hessian
sddev
devtools::test(filter="FamilyMultiNomial")
devtools::test(filter="FamilyMultiNomial")
content_l
devtools::test(filter="FamilyMultiNomial")
colnames(private$Y)
total_list[[colnames(private$Y)]] <- total
cn <- colnames(private$Y)
cn
total_list[[colnames(private$Y)[k]]] <- total
total_list
devtools::test(filter="FamilyMultiNomial")
pi_list
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
f
f
f
n
n
n
n
Q
devtools::test(filter="fmglm")
print(result)
diag(solve(-hessian))
diag(solve(hessian))
devtools::test(filter="fmglm")
result$hessian
solve(result$hessian)
rmultinom(1:3, size=1, prob=(0.5,0.3,0.2))
rmultinom(1:3, size=1, prob=c(0.5,0.3,0.2))
rmultinom(1:3, size=1, prob=c(0.5,0.3,0.2))
rmultinom(1:3, size=1, prob=c(0.5,0.3,0.2))
rmultinom(1:3, size=1, prob=c(0.5,0.3,0.2))
rmultinom(1:3, size=1, prob=c(0.5,0.3,0.2))
rmultinom(1:3, size=1, prob=c(0.5,0.3,0.2))
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
print(result$par)
?vectorize_dummy
??vectorize_dummy
vectorize_dummy(1,2)
vectorize_dummy(1)
devtools::test(filter="fmglm")
x
z
sample(1:10)
sample(1:2, size=10)
sample(1:2, size=10, replace = T)
1:1
c(list(1),list(2))
c(list(1),list(2))[[1]]
c(c(),list(1),list(2))
which(1:10==4)
which(3:10==4)
append(list(0), list(1))
append(c(0), list(1))
append(c(), list(1))
devtools::document()
devtools::document()
devtools::document()
?em
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?devtools::document
debug(devtools:document())
debug(devtools::document())
debug(devtools::document())
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
check()
devtools::check()
devtools::check()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
load("~/Dropbox/SIBMOB/fmmr6/data/titanic.Rdata")
View(titanic)
?titanic
devtools::check()
devtools::check()
devtools::check()
devtools::test()
devtools::check()
usethis::use_package("numDeriv")
devtools::install()
library(fmmr6)
library(fmmr6)
?em
library(fmmr6)
devtools::install()
?em
?fmmr6::em
devtools::check()
devtools::document()
?fmglm
devtools::document()
?fmglm
?fmglm
devtools::document()
?fmglm
devtools::document()
?fmglm
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?fmmr6
?fmmr6
devtools::document()
?fmmr6
?fmglm
devtools::document()
devtools::document()
