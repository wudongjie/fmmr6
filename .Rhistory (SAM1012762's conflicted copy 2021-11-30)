devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
mll
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="Mixer")
devtools::test(filter="Mixer")
devtools::test(filter="Mixer")
devtools::test(filter="Mixer")
devtools::test(filter="Mixer")
constr
devtools::test(filter="Mixer")
n
devtools::test(filter="Mixer")
devtools::test(filter="Mixer")
theta
devtools::test(filter="Mixer")
y_d
dim(Y)
devtools::test(filter="Mixer")
dim(d)
dim(X)
dim(theta)
theta
devtools::test(filter="Mixer")
npar
matrix(theta)
?matrix
as.matrix(theta)
devtools::test(filter="Mixer")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
z
rowSums(Z)
rowSums(z)
hidden
hidden
X
devtools::test(filter="fmglm")
str(Y)
str(X)
class(X)
l
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="OptimGNM")
install.packages("gnm")
devtools::test(filter="OptimGNM")
?gnm::gnm
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
str(gnm::erikson)
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
class(erikson)
is.table(erikson)
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
hidden
hidden[,1]
devtools::test(filter="OptimGNM")
w <-  hidden[,k]
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
data_model
data_model$data
hidden
data_model
data_model$Y
data_model$data
data_model$data$w <- hidden[,k]
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
erikson
str(erikson)
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
erikson
devtools::test(filter="OptimGNM")
nullModel
nullModel$coefficients
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
result
devtools::test(filter="OptimGNM")
nullModel
coef(nullModel)
length(coef(nullModel))
private$.start
result
devtools::test(filter="OptimGNM")
z
hidden
devtools::test(filter="OptimGNM")
erikson
devtools::test(filter="OptimGNM")
nullModel
devtools::test(filter="OptimGNM")
nullModel
hidden[,k]
coefs
devtools::test(filter="OptimGNM")
z
nullModel
devtools::test(filter="OptimGNM")
z
result
result
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
n
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
?nls
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
theta
npar
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
data_model$formula
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
ind
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
?getInitial
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
n
n
devtools::test(filter="OptimGNM")
erikson
devtools::test(filter="OptimGNM")
devtools::test(filter="OptimGNM")
n
n
install.packages("bbmle")
install.packages("bbmle")
install.packages("bbmle")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
n
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
n
devtools::test(filter="fmglm")
ll
theta
theta
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
dim(theta)
dim(ll)
ll
n
n
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
class(theta)
theta
devtools::test(filter="fmglm")
z
Y
devtools::test(filter="fmglm")
ed3cat
gss_test$ed3cat
data_model
data_model$X
Y
data_model$Y
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
theta
dim(Y)
devtools::test(filter="fmglm")
theta
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
theta
devtools::test(filter="fmglm")
nrow(as.matrix(theta))/latent
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="mle")
devtools::test(filter="mle")
devtools::test(filter="mle")
devtools::test(filter="mle")
devtools::test(filter="mle")
devtools::test(filter="mle")
theta
self$latent
devtools::test(filter="mle")
private$.mixer
private$.mixer$latent
self$latent
theta
self$data_model
self$data_model$X
devtools::test(filter="mle")
theta
theta
devtools::test(filter="em")
devtools::test(filter="em")
theta
npar
theta[(npar*(i-1)+1):(npar*(i-1)+npar),]
private$.family
theta
devtools::test(filter="em")
latent
npar
eval(private$.family[[i]])$new()$gen_density()
eval(private$.family[[$]])$new()$gen_density()
eval(private$.family[[1]])$new()$gen_density()
theta[(npar*(i-1)+1):(npar*(i-1)+npar),]
devtools::test(filter="em")
theta
theta[-1]
theta[1]
install.packages("bbmle")
devtools::test(filter="test-mle")
devtools::test(filter="mle")
private$.start
theta
self$latent
self$.start
private$.start
devtools::test(filter="mle")
devtools::test(filter="fmglm")
result
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
pvalue
tvalue
sddev
kpar
result$hessian
result$pi_vector
result$pi_vectorsolve(hessian)
solve(hessian)
diag(solve(hessian))
df
diag(solve(-hessian))
model3$summarize()
devtools::test(filter="fmglm")
model3$summarize()
model3
result3
sddev
devtools::test(filter="fmglm")
sddev
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
model1$summarize()
model2$summarize()
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
str(train)
devtools::test(filter="fmglm")
result$hessian
devtools::test(filter="fmglm")
result$Hessian
str(result)
train$Hessian
devtools::test(filter="fmglm")
result$hessian
devtools::test(filter="fmglm")
train$Hessian
train$Hessian
data_model$Y
devtools::test(filter="fmglm")
result
diag(solve(hessian))
diag(solve(result$hessian))
devtools::test(filter="fmglm")
train$Hessian
devtools::test(filter="fmglm")
train$Hessian
diag(solve(Hessian))
diag(solve(train$Hessian))
devtools::test(filter="fmglm")
train$Hessian
train$Hessian
devtools::test(filter="fmglm")
result$hessian
devtools::test(filter="fmglm")
train$Hessian
devtools::test(filter="fmglm")
result1
result2
devtools::test(filter="fmglm")
result1
result2
devtools::test(filter="fmglm")
result1$hessian
devtools::test(filter="fmglm")
result1$hessian
result2$hessian
str(result1)
#data_model$data$h<- hidden[,k]
train <- glm.fit(data_model$X, data_model$Y, family=self$fam_distrs[[family[[k]]]], weights=hidden[,k])
#data_model$data$h<- hidden[,k]
train <- glm.fit(data_model$X, data_model$Y, family=self$fam_distrs[[family[[k]]]], weights=hidden[,k])
#data_model$data$h<- hidden[,k]
train <- glm.fit(data_model$X, data_model$Y, family=self$fam_distrs[[family[[k]]]], weights=hidden[,k])
devtools::test(filter="fmglm")
devtools::test(filter="em")
result
theta[(npar*(i-1)+1):(npar*(i-1)+npar),]
theta
theta
dim(X)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
result
z
theta_update
result
devtools::test(filter="em")
devtools::test(filter="em")
result
result
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="fmglm")
devtools::test(filter="em")
result
devtools::test(filter="em")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result
z
devtools::test(filter="fmglm")
z
pi_vector
result
z
z
result
result1c
install.packages("optimParallel")
?optimParallel
??optimParallel
install.packages("optimParallel")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result_ols1
devtools::test(filter="fmglm")
cl
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
result_ols1
dnorm(c(1,2),0,1)
dnorm(c(4,5),0,1)
dnorm(c(7,8),0,1)
dnorm(c(7,8),c(2,3),1)
dnorm(c(7,8),c(2,3),1)
dnorm(c(7,2,3),mean = c(2,3,1),1)
dnorm(c(7,7,3),mean = c(2,3,1),1)
devtools::test(filter="mixer")
devtools::test(filter="mixer")
devtools::test(filter="Mixer")
ll
log(0.7)
devtools::test(filter="Mixer")
ll_actual
Rcpp::compileAttributes()
devtools::test(filter="fmglm")
warnings()
devtools::test(filter="fmglm")
private$.mixer$family_init
devtools::test(filter="fmglm")
theta
mix_ll(theta,Y,X,d,latent,family)
View(d)
View(X)
dnorm(-14,1.1,0.4)
dnorm(-14.3381,1.10815,0.4)
dnorm(-14.3381,1.10815,0.4, log=TRUE)
dlnorm(-14.3381,1.10815,0.4)
dlnorm(-14.3381,1.10815,0.4)
exp(-713)
Rcpp::compileAttributes()
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
force(Y)
mix_ll
s
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
theta
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="Mixer")
sum(ll_expect2)
ll_actual2
devtools::test(filter="Mixer")
sum(ll_expect2)
sum(log(ll_expect2))
devtools::test(filter="Mixer")
devtools::test(filter="Mixer")
0.3*dnorm(y,mean=5*x1+3*x2,sd=1)
ll_expect2
dnorm(y,mean=2*x1+4*x2, sd=1)
2*x1+4*x2
x1
x2
dnorm(y, mean=5*x1+3*x2, sd=1, log=T)
dnorm(y, mean=2*x1+4*x2, sd=1, log=T)
sum(dnorm(y, mean=5*x1+3*x2, sd=1, log=T))
sum(dnorm(y, mean=2*x1+4*x2, sd=1, log=T))
d[,1]*(log(0.3) + dnorm(y, mean=5*x1+3*x2, sd=1, log=T))
sum(d[,1]*(log(0.3) + dnorm(y, mean=5*x1+3*x2, sd=1, log=T)))
log(0.3) + dnorm(y, mean=5*x1+3*x2, sd=1, log=T)
dnorm(y, mean=5*x1+3*x2, sd=1, log=T)
sum(dnorm(y,mean=5*x1+3*x2,sd=1))
0.3*dnorm(y,mean=5*x1+3*x2,sd=1)
dnorm(y, mean=5*x1+3*x2, sd=1, log=T)
dnorm(y, mean=2*x1+4*x2, sd=1, log=T)
dnorm(y,mean=5*x1+3*x2,sd=1)
dnorm(y,mean=2*x1+4*x2, sd=1)
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
use_llc
devtools::test(filter="fmglm")
devtools::test(filter="Mixer")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="Mixer")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
devtools::test(filter="fmglm")
View(Y)
write.csv(Y, file="y.csv")
write.csv(X, file="X.csv")
write.csv(d, file="d.csv")
theta
?read.csv
devtools::test(filter="fmglm")
devtools::build()
devtools::build()
devtools::check()
Rcpp::compileAttributes()
devtools::load_all()
?useDynLib
